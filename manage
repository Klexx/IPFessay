#!/usr/bin/env python3
import datetime
import re
import subprocess

import click
import requests


@click.group(context_settings={"help_option_names": ["-h", "--help"]})
@click.version_option(
    prog_name="manage", message="%(prog)s %(version)s: Manage all the things."
)
def cli():
    pass


@cli.command()
@click.option("--ipns", is_flag=True, help="Link to IPNS.")
@click.option("-e", "--eternum-key", help="The Eternum key to use for pinning.")
def release(ipns, eternum_key):
    """Prepare a release."""
    readme = open("README.md").read()
    child = subprocess.Popen(
        ["ipfs", "add", "-Q", "-r", "ipfessay"], stdout=subprocess.PIPE
    )
    new_hash = child.stdout.read().decode("utf8").strip()
    if not new_hash:
        print("There was an error releasing.")
        return
    readme = re.sub(r"/ipfs/[a-zA-Z0-9]*?\n", r"/ipfs/%s\n" % new_hash, readme, count=2)
    readme = re.sub(r"(ipfs pin add) [a-zA-Z0-9]+", r"\1 %s" % new_hash, readme)
    open("README.md", "w").write(readme)
    print("Released %s" % new_hash)

    if eternum_key:
        r = requests.post(
            "https://www.eternum.io/api/pin/",
            headers={"Authorization": "Token %s" % eternum_key},
            data={
                "hash": new_hash,
                "name": "IPFEssay %s"
                % datetime.datetime.now().strftime("%Y-%m-%d %H:%M"),
            },
        )
        if 200 <= r.status_code < 300:
            print("Pinned on Eternum.")
        else:
            errors = [x[0] for x in r.json().values()]
            print("There was an error pinning on Eternum: %s" % ", ".join(errors))

    if ipns:
        child = subprocess.Popen(
            ["ipfs", "name", "publish", "--key=ipfessay", new_hash],
            stdout=subprocess.PIPE,
        )
        ipns_out = child.stdout.read().decode("utf8").strip()
        ipns_name = re.search("(\w+)+\:", ipns_out).groups(1)[0]
        print("Linked IPNS name: %s" % ipns_name)


def main():
    return cli(obj={})


if __name__ == "__main__":
    main()
